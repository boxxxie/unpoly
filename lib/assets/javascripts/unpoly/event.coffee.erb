###**
Events
======

Most Unpoly interactions emit DOM events that are prefixed with `up:`.

    document.addEventListener('up:modal:opened', (event) => {
      console.log('A new modal has just opened!')
    })

Events often have both present and past forms. For example,
`up:modal:open` is emitted before a modal starts to open.
`up:modal:opened` is emitted when the modal has finished its
opening animation.

\#\#\# Preventing events

You can prevent most present form events by calling `preventDefault()`:

    document.addEventListener('up:modal:open', (event) => {
      if (event.url == '/evil') {
        // Prevent the modal from opening
        event.preventDefault()
      }
    })


\#\#\# A better way to bind event listeners

Instead of using [`Element#addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener),
you may find it convenient to use [`up.on()`](/up.on) instead:

    up.on('click', 'button', function(event, button, data) {
      // button is the clicked element
      // data is the parsed [`up-data`](/up-data) attribute
    })

There are some advantages to using `up.on()`:

  - You may pass a selector for [event delegation](https://davidwalsh.name/event-delegate).
  - The event target is automatically passed as a second argument.
  - You may register a listener to multiple events by passing a space-separated list of event name (e.g. `"click mousedown"`).
  - You may register a listener to multiple elements in a single `up.on()` call, by passing a [list](/up.util.isList) of elements.
  - You may use an [`[up-data]`](/up-data) attribute to [attach structured data](/up.on#attaching-structured-data)
    to observed elements. If an `[up-data]` attribute is set, its value will automatically be
    parsed as JSON and passed as a third argument.
  - Event listeners on [unsupported browsers](/up.browser.isSupported) are silently discarded,
    leaving you with an application without JavaScript. This is typically preferable to
    a soup of randomly broken JavaScript in ancient browsers.

@module up.event
###
up.event = do ->
  
  u = up.util
  e = up.element

  actions = new up.Config()

  ###**
  Listens to a [DOM event](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Events)
  on `document` or a given element.

  `up.on()` has some quality of life improvements over
  [`Element#addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener):

  - You may pass a selector for [event delegation](https://davidwalsh.name/event-delegate).
  - The event target is automatically passed as a second argument.
  - You may register a listener to multiple events by passing a space-separated list of event name (e.g. `"click mousedown"`)
  - You may register a listener to multiple elements in a single `up.on()` call, by passing a [list](/up.util.isList) of elements.
  - You use an [`[up-data]`](/up-data) attribute to [attach structured data](/up.on#attaching-structured-data)
    to observed elements. If an `[up-data]` attribute is set, its value will automatically be
    parsed as JSON and passed as a third argument.
  - Event listeners on [unsupported browsers](/up.browser.isSupported) are silently discarded,
    leaving you with an application without JavaScript. This is typically preferable to
    a soup of randomly broken JavaScript in ancient browsers.

  \#\#\# Examples

  The code below will call the listener when a `<a>` is clicked
  anywhere in the `document`:

      up.on('click', 'a', function(event, element) {
        console.log("Click on a link %o", element)
      })

  You may also bind the listener to a given element instead of `document`:

      var form = document.querySelector('form')
      up.on(form, 'click', function(event, form) {
        console.log("Click within %o", form)
      })

  You may also pass both an element and a selector
  for [event delegation](https://davidwalsh.name/event-delegate):

      var form = document.querySelector('form')
      up.on(form, 'click', 'a', function(event, link) {
        console.log("Click on a link %o within %o", link, form)
      })

  \#\#\# Attaching structured data

  In case you want to attach structured data to the event you're observing,
  you can serialize the data to JSON and put it into an `[up-data]` attribute:

      <span class='person' up-data='{ "age": 18, "name": "Bob" }'>Bob</span>
      <span class='person' up-data='{ "age": 22, "name": "Jim" }'>Jim</span>

  The JSON will be parsed and handed to your event handler as a third argument:

      up.on('click', '.person', function(event, element, data) {
        console.log("This is %o who is %o years old", data.name, data.age)
      })

  \#\#\# Unbinding an event listener

  `up.on()` returns a function that unbinds the event listeners when called:

      // Define the listener
      var listener =  function(event) { ... }

      // Binding the listener returns an unbind function
      var unbind = up.on('click', listener)

      // Unbind the listener
      unbind()

  There is also a function [`up.off()`](/up.off) which you can use for the same purpose:

      // Define the listener
      var listener =  function(event) { ... }

      // Bind the listener
      up.on('click', listener)

      // Unbind the listener
      up.off('click', listener)

  @function up.on
  @param {Element|jQuery} [element=document]
    The element on which to register the event listener.

    If no element is given, the listener is registered on the `document`.
  @param {string} events
    A space-separated list of event names to bind to.
  @param {string} [selector]
    The selector of an element on which the event must be triggered.
    Omit the selector to listen to all events with that name, regardless
    of the event target.
  @param {Function(event, [element], [data])} listener
    The listener function that should be called.

    The function takes the affected element as the first argument).
    If the element has an [`up-data`](/up-data) attribute, its value is parsed as JSON
    and passed as a second argument.
  @return {Function()}
    A function that unbinds the event listeners when called.
  @stable
  ###
  bind = (args...) ->
    bindNow(args)

  ###**
  Listens to an event on `document` or a given element.
  The event handler is called with the event target as a
  [jQuery collection](https://learn.jquery.com/using-jquery-core/jquery-object/).

  If you're not using jQuery, use `up.on()` instead, which calls
  event handlers with a native element.

  \#\#\# Example

  ```
  up.$on('click', 'a', function(event, $link) {
    console.log("Click on a link with destination %s", $element.attr('href'))
  })
  ```

  @function up.$on
  @param {Element|jQuery} [element=document]
    The element on which to register the event listener.

    If no element is given, the listener is registered on the `document`.
  @param {string} events
    A space-separated list of event names to bind to.
  @param {string} [selector]
    The selector of an element on which the event must be triggered.
    Omit the selector to listen to all events with that name, regardless
    of the event target.
  @param {Function(event, [element], [data])} listener
    The listener function that should be called.

    The function takes the affected element as the first argument).
    If the element has an [`up-data`](/up-data) attribute, its value is parsed as JSON
    and passed as a second argument.
  @return {Function()}
    A function that unbinds the event listeners when called.
  @stable
  ###
  $bind = (args...) ->
    bindNow(args, jQuery: true)

  bindNow = (args, options) ->
    # Silently discard any event handlers that are registered on unsupported
    # browsers and return a no-op destructor
    return (->) unless up.browser.isSupported()

    up.EventListenerGroup.fromBindArgs(args, options).bind()

  ###**
  Unbinds an event listener previously bound with [`up.on()`](/up.on).

  \#\#\# Example

  Let's say you are listing to clicks on `.button` elements:

      var listener = function() { ... }
      up.on('click', '.button', listener)

  You can stop listening to these events like this:

      up.off('click', '.button', listener)

  Note that you need to pass `up.off()` a reference to the same listener function
  that was passed to `up.on()` earlier.

  @function up.off
  @stable
  ###
  unbind = (args...) ->
    up.EventListenerGroup.fromBindArgs(args).unbind()

  buildEmitter = (args) ->
    return up.EventEmitter.fromEmitArgs(args)

  ###**
  Emits a event with the given name and properties.

  The event will be triggered as an event on `document` or on the given element.

  Other code can subscribe to events with that name using
  [`Element#addEventListener()`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
  or [`up.on()`](/up.on).

  \#\#\# Example

      up.on('my:event', function(event) {
        console.log(event.foo)
      })

      up.emit('my:event', { foo: 'bar' })
      // Prints "bar" to the console

  @function up.emit
  @param {Element|jQuery} [target=document]
    The element on which the event is triggered.

    If omitted, the event will be emitted on the `document`.
  @param {string} eventType
    The name of the event.
  @param {Object} [eventProps={}]
    A list of properties to become part of the event object
    that will be passed to listeners. Note that the event object
    will by default include properties like `preventDefault()`
    or `stopPropagation()`.
  @param {string|Array} [eventProps.log=false]
    A message to print to the console when the event is emitted.

    Pass `true` to print a default message
  @param {Element|jQuery} [eventProps.target=document]
    The element on which the event is triggered.
  @stable
  ###
  emit = (args...) ->
    buildEmitter(args).emit()

  build = (args...) ->
    props = u.extractOptions(args)
    type = args[0] || props.type || up.fail('Expected event type to be passed as string argument or { type } property')

    event = document.createEvent('Event')
    event.initEvent(type, true, true) # name, bubbles, cancelable
    u.assign(event, u.omit(props, ['type', 'target']))

    # IE11 does not set { defaultPrevented: true } after #preventDefault()
    # was called on a custom event.
    # See discussion here: https://stackoverflow.com/questions/23349191
    if up.browser.isIE11()
      originalPreventDefault = event.preventDefault

      event.preventDefault = ->
        # Even though we're swapping out defaultPrevented() with our own implementation,
        # we still need to call the original method to trigger the forwarding of up:click.
        originalPreventDefault.call(event)
        u.getter(event, 'defaultPrevented', -> true)

    return event

  ###**
  [Emits an event](/up.emit) and returns whether no listener
  has prevented the default action.

  @function up.event.nobodyPrevents
  @param {string} eventType
  @param {Object} eventProps
  @param {string|Array} [eventProps.log]
  @return {boolean}
    whether no listener has prevented the default action
  @experimental
  ###
  nobodyPrevents = (args...) ->
    event = emit(args...)
    not event.defaultPrevented

  ###**
  [Emits](/up.emit) the given event and returns a promise
  that will be fulfilled if no listener has prevented the default action.

  If any listener prevented the default listener
  the returned promise will never be resolved.

  @function up.event.whenEmitted
  @param {string} eventType
  @param {Object} eventProps
  @param {string|Array} [eventProps.message]
  @return {Promise}
  @internal
  ###
  whenEmitted = (args...) ->
    buildEmitter(args).whenEmitted()

  ###**
  Registers an event listener to be called when the user
  presses the `Escape` key.

  @function up.event.onEscape
  @param {Function(event)} listener
    The listener function to register.
  @return {Function()}
    A function that unbinds the event listeners when called.
  @experimental
  ###
  onEscape = (listener) ->
    return bind('keydown', (event) ->
      if escapePressed(event)
        listener(event)
    )

  ###**
  Returns whether the given keyboard event involved the ESC key.

  @function up.util.escapePressed
  @internal
  ###
  escapePressed = (event) ->
    key = event.key
    # IE/Edge use 'Esc', other browsers use 'Escape'
    key == 'Escape' || key == 'Esc'

  ###**
  Prevents the event from bubbling up the DOM.
  Also prevents other event handlers bound on the same element.
  Also prevents the event's default action.

  \#\#\# Example

      up.on('click', 'link.disabled', function(event) {
        up.event.halt(event)
      })

  @function up.event.halt
  @param {Event} event
  @experimental
  ###
  halt = (event) ->
    event.stopImmediatePropagation()
    event.preventDefault()

  onReady = (callback) ->
    # Values are "loading", "interactive" and "completed".
    # https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState
    if document.readyState != 'loading'
      callback()
    else
      document.addEventListener('DOMContentLoaded', callback)

  keyModifiers = ['metaKey', 'shiftKey', 'ctrlKey', 'altKey']

  ###**
  @function up.event.isUnmodified
  @internal
  ###
  isUnmodified = (event) ->
    (u.isUndefined(event.button) || event.button == 0) && !u.some(keyModifiers, (modifier) -> event[modifier])

  fork = (originalEvent, newType, copyKeys = []) ->
    newEvent = up.event.build(newType, u.pick(originalEvent, copyKeys))
    newEvent.originalEvent = originalEvent # allow users to access other props through event.originalEvent.prop

    ['stopPropagation', 'stopImmediatePropagation', 'preventDefault'].forEach (key) ->
      originalMethod = newEvent[key]

      newEvent[key] = ->
        originalEvent[key]()
        return originalMethod.call(newEvent)

    return newEvent

  ###*
  Emits the given event when this link is clicked.

  When the emitted event's default' is prevented, the original `click` event's default is also prevented.

  You may use this attribute to emit events when clicking on areas that are no hyperlinks,
  by setting it on an `<a>` element without a `[href]` attribute.

  \#\#\# Example

      <a href='/users/5" up-emit='user:select' up-emit-props='{ "id": 5, "firstName": "Alice" }'>Alice</a>

      <script>
        up.on('a', 'user:select', function(event) {
          console.log(event.firstName) // logs "Alice"
          event.preventDefault()       // will prevent the link from being followed
        })
      </script>

  @selector a[up-emit]
  @param {string} up-emit
    The type of the event to be emitted.
  @param {string} up-emit-props
    The event properties, serialized as JSON.
  ###
  executeEmitAttr = (event, element) ->
    return unless isUnmodified(event)
    eventType = e.attr(element, 'up-emit')
    eventProps = e.jsonAttr(element, 'up-emit-props')
    forkedEvent = fork(event, eventType)
    u.assign(forkedEvent, eventProps)
    up.emit(element, forkedEvent)

  registerAction = (name, fn) ->
    actions[name] = fn

  getAction = (name) ->
    return actions[name] or up.fail('Unknown action: ' + name)


  ACTION_NAME_PATTERN = /^[\w\-\.]+$/

  functionForAttrValue = (value, argNames) ->
    if ACTION_NAME_PATTERN.test(value)
      return getAction(value)
    else
      return new Function(argNames..., value)

  actionAttr = (link, attr, paramNames = [], processArgs = u.identity) ->
    if value = link.getAttribute(attr)
      fn = null

      return (args...) ->
        args = processArgs(args)

        # Retrieve the function lazily in case the user defines the referred action
        # in a <script> tag below the referring link.
        fn ||= functionForAttrValue(value, paramNames)

        # Emulate the behavior of the `onclick` attribute, where `this` refers to the clicked element.
        fn.call(link, args...)

  actionAttr = (link, attr, options) ->
    options = u.options(argNames: ['event'])

    if value = link.getAttribute(attr)
      fn = null

      return (args...) ->
        if keys = options.exposeKeys
          event = args[0]
          # Allow callbacks to refer to an exposed property directly instead of through `event.key`.
          exposedValues = u.values(u.pick(event, keys))
          args = [event, exposedValues...]

        args = processArgs(args)

        # Retrieve the function lazily in case the user defines the referred action asynchronously.
        fn ||= functionForAttrValue(value, options.argNames)

        # Emulate the behavior of the `onclick` attribute, where `this` refers to the clicked element.
        fn.call(link, args...)

  exposingActionAttr = (link, attr, exposedKeys = []) ->
    appendExposedValues = (args) ->
      event = args[0]
      # Allow callbacks to refer to an exposed property directly instead of through `event.key`.
      exposedValues = u.values(u.pick(event, exposedKeys))
      return [event, exposedValues...]

    functionAttr(link, attr, ['event', exposedKeys...], appendExposedValues)

  bind 'up:click', 'a[up-emit]', executeEmitAttr

  reset = ->
    # Resets the list of registered event listeners to the
    # moment when the framework was booted.
    for element in [window, document, e.root, document.body]
      up.EventListener.unbindNonDefault(element)

    actions.reset()

  bind 'up:framework:reset', reset

  <% if ENV['JS_KNIFE'] %>knife: eval(Knife.point)<% end %>
  on: bind # can't name symbols `on` in Coffeescript
  $on: $bind
  off: unbind # can't name symbols `off` in Coffeescript
  build: build
  emit: emit
  nobodyPrevents: nobodyPrevents
  whenEmitted: whenEmitted
  onEscape: onEscape
  halt: halt
  onReady: onReady
  isUnmodified: isUnmodified
  fork: fork
  keyModifiers: keyModifiers
  action: registerAction
  getAction: getAction

up.on = up.event.on
up.$on = up.event.$on
up.off = up.event.off
up.$off = up.event.off # it's the same as up.off()
up.emit = up.event.emit
up.action = up.event.action

up.legacy.renamedPackage 'bus', 'event'
